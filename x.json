{
  "name": "canvas",
  "description": "Canvas for ChiÏ‡",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/canvas.git"
  },
  "dependencies": {},
  "nodes": [
    {
      "ports": {
        "input": {
          "context": {
            "title": "Context",
            "async": true,
            "type": "CanvasRenderingContext2D",
            "required": "true"
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          }
        }
      },
      "phrases": {
        "active": "Beginning path"
      },
      "description": "Begin path",
      "title": "Begin Path",
      "async": true,
      "ns": "canvas",
      "name": "beginPath",
      "fn": "on.input.context = function() {\n  data.beginPath();\n  output({ context: data });\n};\n"
    },
    {
      "ports": {
        "input": {
          "context": {
            "title": "Context",
            "async": true,
            "type": "CanvasRenderingContext2D",
            "required": "true"
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          }
        }
      },
      "phrases": {
        "active": "Clipping"
      },
      "description": "Clip",
      "title": "Clip",
      "async": true,
      "ns": "canvas",
      "name": "clip",
      "fn": "on.input.context = function() {\n  data.clip();\n  output({ context: data });\n};\n"
    },
    {
      "ports": {
        "input": {
          "context": {
            "title": "Context",
            "async": true,
            "type": "CanvasRenderingContext2D",
            "required": "true"
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          }
        }
      },
      "phrases": {
        "active": "Closing path"
      },
      "description": "Close path",
      "title": "Close Path",
      "async": true,
      "ns": "canvas",
      "name": "closePath",
      "fn": "on.input.context = function() {\n  data.closePath();\n  output({ context: data });\n};\n"
    },
    {
      "ports": {
        "input": {
          "context": {
            "title": "Context",
            "async": true,
            "type": "CanvasRenderingContext2D",
            "required": "true"
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          }
        }
      },
      "phrases": {
        "active": "Committing context"
      },
      "description": "Commit Context",
      "title": "Commit",
      "async": true,
      "ns": "canvas",
      "name": "commit",
      "fn": "on.input.context = function() {\n  data.commit();\n  output({ context: data });\n};\n"
    },
    {
      "ports": {
        "input": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D",
            "required": "true"
          },
          "image": {
            "title": "imagedata",
            "type": "ImageData"
          },
          "in": {
            "title": "Dimensions",
            "async": true,
            "type": "array",
            "items": [
              {
                "type": "number",
                "title": "Width"
              },
              {
                "type": "number",
                "title": "Height"
              }
            ],
            "minItems": 2,
            "maxItems": 2
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          },
          "out": {
            "title": "Point",
            "type": "array"
          }
        }
      },
      "phrases": {
        "active": "Creating image data"
      },
      "description": "Creates a new, blank ImageData object with the specified dimensions. All of the pixels in the new object are transparent black",
      "title": "Create Image Data",
      "async": true,
      "ns": "canvas",
      "name": "createImageData",
      "fn": "on.input.in = function() {\n  input.context.createImageData(data[0], data[1]);\n  output({\n    context: input.context,\n    out: data\n  });\n};\n"
    },
    {
      "ports": {
        "input": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D",
            "required": "true"
          },
          "element": {
            "title": "Element",
            "async": true,
            "type": "HTMLElement"
          },
          "repetition": {
            "title": "Repetition",
            "enum": [
              "repeat",
              "repeat-x",
              "repeat-y",
              "no-repeat"
            ]
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          },
          "out": {
            "title": "Object",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Creating pattern"
      },
      "description": "A DOM element to use as the source image for the pattern. This can be any element, although typically you'll use an Image or <canvas>",
      "title": "Create Pattern",
      "async": true,
      "ns": "canvas",
      "name": "createPattern",
      "fn": "on.input.element = function() {\n  output({\n    out: input.context.createImageData(data, input.repetition),\n    context: input.context\n  });\n};\n"
    },
    {
      "ports": {
        "input": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D",
            "required": "true"
          },
          "element": {
            "title": "Element",
            "type": "HTMLElement",
            "required": true
          },
          "in": {
            "title": "Dimensions",
            "async": true,
            "type": "object",
            "items": {
              "dx": {
                "type": "float",
                "description": "The X coordinate in the destination canvas at which to place the top-left corner of the source image."
              },
              "dy": {
                "type": "float",
                "description": "The Y coordinate in the destination canvas at which to place the top-left corner of the source image."
              },
              "dw": {
                "type": "float",
                "description": "The width to draw the image in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in width when drawn."
              },
              "dh": {
                "type": "float",
                "description": "The height to draw the image in the destination canvas. This allows scaling of the drawn image. If not specified, the image is not scaled in height when drawn."
              },
              "sx": {
                "type": "float",
                "description": "The X coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context."
              },
              "sy": {
                "type": "float",
                "description": "The Y coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context."
              },
              "sw": {
                "type": "float",
                "description": "The width of the sub-rectangle of the source image to draw into the destination context. If not specified, the entire rectangle from the coordinates specified by sx and sy to the bottom-right corner of the image is used. If you specify a negative value, the image is flipped horizontally when drawn."
              },
              "sh": {
                "type": "float",
                "description": "The height of the sub-rectangle of the source image to draw into the destination context. If you specify a negative value, the image is flipped vertically when drawn."
              }
            }
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          },
          "out": {
            "title": "Point",
            "type": "array"
          },
          "error": {
            "title": "Error",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Drawing image"
      },
      "description": "",
      "title": "Draw Image",
      "async": true,
      "ns": "canvas",
      "name": "drawImage",
      "fn": "on.input.in = function() {\n\n  var args = [input.image];\n\n  if(data.sx && data.sy && data.sw &&  data.sh) {\n    args.push(data.sx);\n    args.push(data.sy);\n    args.push(data.sw);\n    args.push(data.sh);\n  }\n\n  data.push(data.dx || 0);\n  data.push(data.dy || 0);\n\n  if(data.dw) {\n    data.push(data.dw);\n    if(data.dh) {\n      data.push(data.dh);\n    }\n  }\n\n  var res, error = null;\n  try {\n    res = input.context.drawImage.apply(null, args),\n  } catch(e) {\n    error = e;\n  }\n\n  if(error) {\n    output({\n      error: error,\n      context: input.context,\n    });\n  } else {\n    output({\n      out: input.context.drawImage.apply(null, args),\n      context: input.context,\n    });\n  }\n\n};\n"
    },
    {
      "ports": {
        "input": {
          "context": {
            "title": "Context",
            "async": true,
            "type": "CanvasRenderingContext2D",
            "required": "true"
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          }
        }
      },
      "phrases": {
        "active": "Filling context"
      },
      "description": "Fill Context",
      "title": "Fill",
      "async": true,
      "ns": "canvas",
      "name": "fill",
      "fn": "on.input.context = function() {\n  data.fill();\n  output({ context: data });\n};\n"
    },
    {
      "ports": {
        "input": {
          "canvas": {
            "title": "Canvas",
            "async": true,
            "type": "HTMLElement",
            "required": "true"
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          }
        }
      },
      "phrases": {
        "active": "Getting context"
      },
      "description": "Get Canvas Context",
      "title": "Get Context",
      "async": true,
      "ns": "canvas",
      "name": "getContext",
      "fn": "on.input.canvas = function() {\n  output({\n    context: data.getContext('2d')\n  });\n};\n"
    },
    {
      "ports": {
        "input": {
          "context": {
            "title": "Context",
            "async": true,
            "type": "CanvasRenderingContext2D",
            "required": "true"
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          },
          "out": {
            "title": "Segment",
            "type": "array"
          }
        }
      },
      "phrases": {
        "active": "Getting line dash"
      },
      "description": "Get Line Dash",
      "title": "Get Line Dash",
      "async": true,
      "ns": "canvas",
      "name": "getLineDash",
      "fn": "on.input.context = function() {\n  output({\n    out: data.getLineDash(),\n    context: data\n  });\n};\n"
    },
    {
      "ports": {
        "input": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D",
            "required": "true"
          },
          "in": {
            "title": "Point",
            "async": true,
            "type": "object",
            "required": "true",
            "properties": {
              "x": {
                "type": "number",
                "title": "X",
                "description": "The x axis of the coordinate for the end of the line"
              },
              "y": {
                "type": "number",
                "title": "Y",
                "description": "The y axis of the coordinate for the end of the line"
              }
            }
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          },
          "out": {
            "title": "Point",
            "type": "array"
          }
        }
      },
      "phrases": {
        "active": "Moving"
      },
      "description": "Connects the last point in the subpath to the x, y coordinates with a straight line",
      "title": "Line To",
      "async": true,
      "ns": "canvas",
      "name": "lineTo",
      "fn": "on.input.in = function() {\n  input.context.lineTo(data.x, data.y);\n  output({\n    context: input.context,\n    out: data\n  });\n};\n"
    },
    {
      "ports": {
        "input": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D",
            "required": "true"
          },
          "text": {
            "title": "Text",
            "type": "string",
            "async": true,
            "required": "true"
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          },
          "metrics": {
            "title": "Text Metrics",
            "type": "nsIDOMTextMetrics"
          }
        }
      },
      "phrases": {
        "active": "Measuring text"
      },
      "description": "Measure Text",
      "title": "Measure Text",
      "async": true,
      "ns": "canvas",
      "name": "measureText",
      "fn": "on.input.text= function() {\n  output({\n    metrics: input.context.measureText(data),\n    context: input.context\n  });\n};\n"
    },
    {
      "ports": {
        "input": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D",
            "required": "true"
          },
          "in": {
            "title": "Point",
            "async": true,
            "type": "object",
            "required": "true",
            "properties": {
              "x": {
                "type": "number",
                "title": "X"
              },
              "y": {
                "type": "number",
                "title": "Y"
              }
            }
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          },
          "out": {
            "title": "Point",
            "type": "array"
          }
        }
      },
      "phrases": {
        "active": "Moving"
      },
      "description": "Moves the starting point of a new subpath to the (x, y) coordinates",
      "title": "Move To",
      "async": true,
      "ns": "canvas",
      "name": "moveTo",
      "fn": "on.input.in = function() {\n  input.context.moveTo(data.x, data.y);\n  output({\n    context: input.context,\n    out: data\n  });\n};\n"
    },
    {
      "ports": {
        "input": {
          "context": {
            "title": "Context",
            "async": true,
            "type": "CanvasRenderingContext2D",
            "required": "true"
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          }
        }
      },
      "phrases": {
        "active": "Resetting clip"
      },
      "description": "Reset Clip",
      "title": "Reset Clip",
      "async": true,
      "ns": "canvas",
      "name": "resetClip",
      "fn": "on.input.context = function() {\n  data.resetClip();\n  output({ context: data });\n};\n"
    },
    {
      "ports": {
        "input": {
          "context": {
            "title": "Context",
            "async": true,
            "type": "CanvasRenderingContext2D",
            "required": "true"
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          }
        }
      },
      "phrases": {
        "active": "Resetting clip"
      },
      "description": "Reset Transform",
      "title": "Reset Transform",
      "async": true,
      "ns": "canvas",
      "name": "resetTransform",
      "fn": "on.input.context = function() {\n  data.resetTransform();\n  output({ context: data });\n};\n"
    },
    {
      "ports": {
        "input": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D",
            "required": "true"
          },
          "angle": {
            "title": "Angle",
            "async": true,
            "type": "number",
            "required": "true"
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          },
          "rotation": {
            "title": "Rotation",
            "type": "number"
          }
        }
      },
      "phrases": {
        "active": "Rotating"
      },
      "description": "Rotate Context",
      "title": "Rotate",
      "async": true,
      "ns": "canvas",
      "name": "rotate",
      "fn": "on.input.angle = function() {\n  input.context.rotate(data);\n  output({\n    context: input.context,\n    rotation: input.context.attrs.rotation\n  });\n};\n"
    },
    {
      "ports": {
        "input": {
          "context": {
            "title": "Context",
            "async": true,
            "type": "CanvasRenderingContext2D",
            "required": "true"
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          }
        }
      },
      "phrases": {
        "active": "Saving context"
      },
      "description": "Save Context",
      "title": "Save",
      "async": true,
      "ns": "canvas",
      "name": "save",
      "fn": "on.input.context = function() {\n  data.save();\n  output({ context: data });\n};\n"
    },
    {
      "ports": {
        "input": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D",
            "required": "true"
          },
          "in": {
            "title": "Scaling factor x/y",
            "async": true,
            "type": "array",
            "required": "true",
            "items": [
              {
                "type": "number",
                "title": "X"
              },
              {
                "type": "number",
                "title": "Y"
              }
            ],
            "minItems": 2,
            "maxItems": 2
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          }
        }
      },
      "phrases": {
        "active": "Scaling"
      },
      "description": "Scale",
      "title": "Scale",
      "async": true,
      "ns": "canvas",
      "name": "scale",
      "fn": "on.input.in = function() {\n  input.context.scale(data[0], data[1]);\n  output({ context: input.context });\n};\n"
    },
    {
      "ports": {
        "input": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D",
            "required": "true"
          },
          "in": {
            "title": "Attributes",
            "type": "object",
            "async": true,
            "required": "true",
            "items": {
              "fillStyle": {
                "type": "string",
                "title": "Fill Style",
                "description": "Color or style to use inside shapes. Default #000 (black).",
                "default": "#000"
              },
              "font": {
                "type": "string",
                "title": "Font",
                "default": "10px sans-serif"
              },
              "globalAlpha": {
                "type": "string",
                "title": "Global Alpha",
                "description": "globalAlpha float Alpha value that is applied to shapes and images before they are composited onto the canvas. Default 1.0 (opaque).",
                "default": 1
              },
              "globalCompositeOperation": {
                "title": "Global Alpha",
                "description": "With globalAlpha applied this sets how shapes and images are drawn onto the existing bitmap.",
                "enum": [
                  "source-atop",
                  "source-in",
                  "source-out",
                  "source-over",
                  "destination-atop",
                  "destination-in",
                  "destination-out",
                  "destination-over",
                  "lighter",
                  "darker",
                  "copy",
                  "xor"
                ],
                "default": "source-over"
              },
              "lineCap": {
                "enum": [
                  "butt",
                  "round",
                  "square"
                ],
                "title": "Line Cap",
                "description": "Type of endings on the end of lines.",
                "default": "butt"
              },
              "lineDashOffset": {
                "type": "float",
                "title": "Line Dash Offset",
                "description": "Specifies where to start a dasharray on a line."
              },
              "lineJoin": {
                "enum": [
                  "miter",
                  "round",
                  "bevel"
                ],
                "title": "Line Join",
                "description": "Defines the type of corners where two lines meet.",
                "default": "miter"
              },
              "lineWidth": {
                "type": "number",
                "title": "Line Width",
                "description": "Width of lines",
                "default": 1
              },
              "miterLimit": {
                "type": "number",
                "title": "Miter Limit",
                "default": 10
              },
              "shadowBlur": {
                "type": "number",
                "title": "Shadow Blur",
                "description": "float Specifies the blurring effect.",
                "default": 0
              },
              "shadowColor": {
                "type": "number",
                "title": "Shadow Color",
                "description": "Color of the shadow. Default fully-transparent black.",
                "default": 0
              },
              "shadowOffsetX": {
                "type": "number",
                "title": "Shadow Offset X",
                "description": "Horizontal distance the shadow will be offset.",
                "default": 0
              },
              "shadowOffsetY": {
                "type": "number",
                "title": "Shadow Offset Y",
                "description": "Vertical distance the shadow will be offset.",
                "default": 0
              },
              "strokeStyle": {
                "type": "number",
                "title": "Stroke style",
                "description": "Color or style to use for the lines around shapes.",
                "default": "#000"
              },
              "textAlign": {
                "enum": [
                  "start",
                  "end",
                  "left",
                  "right",
                  "center"
                ],
                "title": "Text Align",
                "default": "start"
              },
              "textBaseline": {
                "enum": [
                  "top",
                  "hanging",
                  "middle",
                  "alphabetic",
                  "ideographic",
                  "bottom"
                ],
                "title": "Text Baseline",
                "default": "alphabetic"
              }
            }
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          }
        }
      },
      "phrases": {
        "active": "Setting attributes"
      },
      "description": "Sets one or more attributes",
      "title": "Set Attributes",
      "async": true,
      "ns": "canvas",
      "name": "setAttributes",
      "fn": "on.input.in = function() {\n  for(var k in data) {\n    input.context[k] = data[k];\n  }\n  output({\n    context: input.context\n  });\n};\n"
    },
    {
      "ports": {
        "input": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D",
            "required": "true"
          },
          "segment": {
            "title": "Segment",
            "description": "An even number of non-negative numbers specifying a dash list.",
            "type": "array",
            "async": true,
            "required": "true"
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          }
        }
      },
      "phrases": {
        "active": "Setting line dash"
      },
      "description": "Set Line Dash",
      "title": "Set Line Dash",
      "async": true,
      "ns": "canvas",
      "name": "setLineDash",
      "fn": "on.input.segment = function() {\n  input.context.setLineDash(data);\n  output({\n    context: input.context\n  });\n};\n"
    },
    {
      "ports": {
        "input": {
          "context": {
            "title": "Context",
            "async": true,
            "type": "CanvasRenderingContext2D",
            "required": "true"
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          }
        }
      },
      "phrases": {
        "active": "Stroking path"
      },
      "description": "Stroke",
      "title": "Stroke",
      "async": true,
      "ns": "canvas",
      "name": "stroke",
      "fn": "on.input.context = function() {\n  data.stroke();\n  output({ context: data });\n};\n"
    },
    {
      "ports": {
        "input": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D",
            "required": "true"
          },
          "in": {
            "title": "Point",
            "async": true,
            "type": "array",
            "required": "true",
            "items": [
              {
                "type": "number",
                "title": "X"
              },
              {
                "type": "number",
                "title": "Y"
              }
            ],
            "minItems": 2,
            "maxItems": 2
          }
        },
        "output": {
          "context": {
            "title": "Context",
            "type": "CanvasRenderingContext2D"
          },
          "out": {
            "title": "Point",
            "type": "array"
          }
        }
      },
      "phrases": {
        "active": "Translating context"
      },
      "description": "Moves the origin point of the context to (x, y)",
      "title": "Translate",
      "async": true,
      "ns": "canvas",
      "name": "translate",
      "fn": "on.input.in = function() {\n  input.context.translate(data[0], data[1]);\n  output({\n    context: input.context,\n    out: data\n  });\n};\n"
    }
  ],
  "twigs": []
}